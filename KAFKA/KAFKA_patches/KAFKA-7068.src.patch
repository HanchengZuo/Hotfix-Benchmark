diff --git a/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java b/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java
index f5a3737d33..7e21a3223d 100644
--- a/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java
+++ b/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java
@@ -80,13 +80,11 @@ public class ConfigTransformer {
 
         // Collect the variables from the given configs that need transformation
         for (Map.Entry<String, String> config : configs.entrySet()) {
-            if (config.getValue() != null) {
-                List<ConfigVariable> vars = getVars(config.getKey(), config.getValue(), DEFAULT_PATTERN);
-                for (ConfigVariable var : vars) {
-                    Map<String, Set<String>> keysByPath = keysByProvider.computeIfAbsent(var.providerName, k -> new HashMap<>());
-                    Set<String> keys = keysByPath.computeIfAbsent(var.path, k -> new HashSet<>());
-                    keys.add(var.variable);
-                }
+            List<ConfigVariable> vars = getVars(config.getKey(), config.getValue(), DEFAULT_PATTERN);
+            for (ConfigVariable var : vars) {
+                Map<String, Set<String>> keysByPath = keysByProvider.computeIfAbsent(var.providerName, k -> new HashMap<>());
+                Set<String> keys = keysByPath.computeIfAbsent(var.path, k -> new HashSet<>());
+                keys.add(var.variable);
             }
         }
 
@@ -133,9 +131,6 @@ public class ConfigTransformer {
     private static String replace(Map<String, Map<String, Map<String, String>>> lookupsByProvider,
                                   String value,
                                   Pattern pattern) {
-        if (value == null) {
-            return null;
-        }
         Matcher matcher = pattern.matcher(value);
         StringBuilder builder = new StringBuilder();
         int i = 0;

