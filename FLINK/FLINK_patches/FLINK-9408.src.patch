diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/EstablishedResourceManagerConnection.java b/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/EstablishedResourceManagerConnection.java
index e64754d6e8b..46c1b4bde7a 100644
--- a/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/EstablishedResourceManagerConnection.java
+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/EstablishedResourceManagerConnection.java
@@ -20,6 +20,7 @@ package org.apache.flink.runtime.jobmaster;
 
 import org.apache.flink.runtime.clusterframework.types.ResourceID;
 import org.apache.flink.runtime.resourcemanager.ResourceManagerGateway;
+import org.apache.flink.runtime.resourcemanager.ResourceManagerId;
 
 import javax.annotation.Nonnull;
 
@@ -29,25 +30,29 @@ import javax.annotation.Nonnull;
  */
 class EstablishedResourceManagerConnection {
 
-	@Nonnull
 	private final ResourceManagerGateway resourceManagerGateway;
 
-	@Nonnull
+	private final ResourceManagerId resourceManagerId;
+
 	private final ResourceID resourceManagerResourceID;
 
 	EstablishedResourceManagerConnection(
 			@Nonnull ResourceManagerGateway resourceManagerGateway,
+			@Nonnull ResourceManagerId resourceManagerId,
 			@Nonnull ResourceID resourceManagerResourceID) {
 		this.resourceManagerGateway = resourceManagerGateway;
+		this.resourceManagerId = resourceManagerId;
 		this.resourceManagerResourceID = resourceManagerResourceID;
 	}
 
-	@Nonnull
 	public ResourceManagerGateway getResourceManagerGateway() {
 		return resourceManagerGateway;
 	}
 
-	@Nonnull
+	public ResourceManagerId getResourceManagerId() {
+		return resourceManagerId;
+	}
+
 	public ResourceID getResourceManagerResourceID() {
 		return resourceManagerResourceID;
 	}
diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMaster.java b/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMaster.java
index 1df9d89f201..5f5a9a903c2 100644
--- a/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMaster.java
+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMaster.java
@@ -131,7 +131,6 @@ import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeoutException;
 
 import static org.apache.flink.util.Preconditions.checkNotNull;
-import static org.apache.flink.util.Preconditions.checkState;
 
 /**
  * JobMaster implementation. The job master is responsible for the execution of a single
@@ -209,9 +208,6 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 	@Nullable
 	private String lastInternalSavepoint;
 
-	@Nullable
-	private ResourceManagerAddress resourceManagerAddress;
-
 	@Nullable
 	private ResourceManagerConnection resourceManagerConnection;
 
@@ -892,13 +888,13 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 			final Exception cause) {
 
 		if (isConnectingToResourceManager(resourceManagerId)) {
-			reconnectToResourceManager(cause);
+			closeResourceManagerConnection(cause);
 		}
 	}
 
 	private boolean isConnectingToResourceManager(ResourceManagerId resourceManagerId) {
-		return resourceManagerAddress != null
-				&& resourceManagerAddress.getResourceManagerId().equals(resourceManagerId);
+		return resourceManagerConnection != null
+				&& resourceManagerConnection.getTargetLeaderId().equals(resourceManagerId);
 	}
 
 	@Override
@@ -1003,10 +999,9 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 
 		setNewFencingToken(newJobMasterId);
 
-		startJobMasterServices();
-
 		log.info("Starting execution of job {} ({})", jobGraph.getName(), jobGraph.getJobID());
 
+		startJobMasterServices();
 		resetAndScheduleExecutionGraph();
 
 		return Acknowledge.get();
@@ -1016,10 +1011,6 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 		// start the slot pool make sure the slot pool now accepts messages for this leader
 		slotPool.start(getFencingToken(), getAddress());
 
-		//TODO: Remove once the ZooKeeperLeaderRetrieval returns the stored address upon start
-		// try to reconnect to previously known leader
-		reconnectToResourceManager(new FlinkException("Starting JobMaster component."));
-
 		// job is ready to go, try to establish connection with resource manager
 		//   - activate leader retrieval for the resource manager
 		//   - on notification of the leader, the connection will be established and
@@ -1081,8 +1072,8 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 			ExecutionGraph newExecutionGraph,
 			JobManagerJobMetricGroup newJobManagerJobMetricGroup) {
 		validateRunsInMainThread();
-		checkState(executionGraph.getState().isTerminalState());
-		checkState(jobManagerJobMetricGroup == null);
+		Preconditions.checkState(executionGraph.getState().isTerminalState());
+		Preconditions.checkState(jobManagerJobMetricGroup == null);
 
 		executionGraph = newExecutionGraph;
 		jobManagerJobMetricGroup = newJobManagerJobMetricGroup;
@@ -1112,7 +1103,7 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 	}
 
 	private void scheduleExecutionGraph() {
-		checkState(jobStatusListener == null);
+		Preconditions.checkState(jobStatusListener == null);
 		// register self as job status change listener
 		jobStatusListener = new JobManagerJobStatusListener();
 		executionGraph.registerJobStatusListener(jobStatusListener);
@@ -1248,40 +1239,33 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 		}
 	}
 
-	private void notifyOfNewResourceManagerLeader(final String newResourceManagerAddress, final ResourceManagerId resourceManagerId) {
-		resourceManagerAddress = createResourceManagerAddress(newResourceManagerAddress, resourceManagerId);
+	private void notifyOfNewResourceManagerLeader(final String resourceManagerAddress, final ResourceManagerId resourceManagerId) {
+		if (resourceManagerConnection != null) {
+			if (resourceManagerAddress != null) {
+				if (Objects.equals(resourceManagerAddress, resourceManagerConnection.getTargetAddress())
+					&& Objects.equals(resourceManagerId, resourceManagerConnection.getTargetLeaderId())) {
+					// both address and leader id are not changed, we can keep the old connection
+					return;
+				}
 
-		reconnectToResourceManager(new FlinkException(String.format("ResourceManager leader changed to new address %s", resourceManagerAddress)));
-	}
+				log.info("ResourceManager leader changed from {} to {}. Registering at new leader.",
+					resourceManagerConnection.getTargetAddress(), resourceManagerAddress);
 
-	@Nullable
-	private ResourceManagerAddress createResourceManagerAddress(@Nullable String newResourceManagerAddress, @Nullable ResourceManagerId resourceManagerId) {
-		if (newResourceManagerAddress != null) {
-			// the contract is: address == null <=> id == null
-			checkNotNull(resourceManagerId);
-			return new ResourceManagerAddress(newResourceManagerAddress, resourceManagerId);
-		} else {
-			return null;
+				closeResourceManagerConnection(new Exception(
+					"ResourceManager leader changed to new address " + resourceManagerAddress));
+			} else {
+				log.info("Current ResourceManager {} lost leader status. Waiting for new ResourceManager leader.",
+					resourceManagerConnection.getTargetAddress());
+			}
 		}
-	}
-
-	private void reconnectToResourceManager(Exception cause) {
-		closeResourceManagerConnection(cause);
-		tryConnectToResourceManager();
-	}
 
-	private void tryConnectToResourceManager() {
 		if (resourceManagerAddress != null) {
-			connectToResourceManager();
+			createResourceManagerConnection(resourceManagerAddress, resourceManagerId);
 		}
 	}
 
-	private void connectToResourceManager() {
-		assert(resourceManagerAddress != null);
-		assert(resourceManagerConnection == null);
-		assert(establishedResourceManagerConnection == null);
-
-		log.info("Connecting to ResourceManager {}", resourceManagerAddress);
+	private void createResourceManagerConnection(String resourceManagerAddress, ResourceManagerId resourceManagerId) {
+		log.info("Attempting to register at ResourceManager {}", resourceManagerAddress);
 
 		resourceManagerConnection = new ResourceManagerConnection(
 			log,
@@ -1289,8 +1273,8 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 			resourceId,
 			getAddress(),
 			getFencingToken(),
-			resourceManagerAddress.getAddress(),
-			resourceManagerAddress.getResourceManagerId(),
+			resourceManagerAddress,
+			resourceManagerId,
 			scheduledExecutorService);
 
 		resourceManagerConnection.start();
@@ -1311,6 +1295,7 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 
 			establishedResourceManagerConnection = new EstablishedResourceManagerConnection(
 				resourceManagerGateway,
+				success.getResourceManagerId(),
 				resourceManagerResourceId);
 
 			slotPoolGateway.connectToResourceManager(resourceManagerGateway);
@@ -1556,12 +1541,7 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 
 		@Override
 		protected void onRegistrationSuccess(final JobMasterRegistrationSuccess success) {
-			runAsync(() -> {
-				// filter out replace connections
-				if (this == resourceManagerConnection) {
-					establishResourceManagerConnection(success);
-				}
-			});
+			runAsync(() -> establishResourceManagerConnection(success));
 		}
 
 		@Override
@@ -1630,9 +1610,14 @@ public class JobMaster extends FencedRpcEndpoint<JobMasterId> implements JobMast
 				log.info("The heartbeat of ResourceManager with id {} timed out.", resourceId);
 
 				if (establishedResourceManagerConnection != null && establishedResourceManagerConnection.getResourceManagerResourceID().equals(resourceId)) {
-					reconnectToResourceManager(
-						new JobMasterException(
-							String.format("The heartbeat of ResourceManager with id %s timed out.", resourceId)));
+					final String resourceManagerAddress = establishedResourceManagerConnection.getResourceManagerGateway().getAddress();
+					final ResourceManagerId resourceManagerId = establishedResourceManagerConnection.getResourceManagerId();
+
+					closeResourceManagerConnection(
+						new TimeoutException(
+							"The heartbeat of ResourceManager with id " + resourceId + " timed out."));
+
+					createResourceManagerConnection(resourceManagerAddress, resourceManagerId);
 				}
 			});
 		}
diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/ResourceManagerAddress.java b/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/ResourceManagerAddress.java
deleted file mode 100644
index d549f7bc47b..00000000000
--- a/flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/ResourceManagerAddress.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.flink.runtime.jobmaster;
-
-import org.apache.flink.runtime.resourcemanager.ResourceManagerId;
-
-import javax.annotation.Nonnull;
-
-import java.util.Objects;
-
-/**
- * Current address and fencing token of the leading ResourceManager.
- */
-public class ResourceManagerAddress {
-
-	@Nonnull
-	private final String address;
-
-	@Nonnull
-	private final ResourceManagerId resourceManagerId;
-
-	public ResourceManagerAddress(@Nonnull String address, @Nonnull ResourceManagerId resourceManagerId) {
-		this.address = address;
-		this.resourceManagerId = resourceManagerId;
-	}
-
-	@Nonnull
-	public String getAddress() {
-		return address;
-	}
-
-	@Nonnull
-	public ResourceManagerId getResourceManagerId() {
-		return resourceManagerId;
-	}
-
-	@Override
-	public boolean equals(Object obj) {
-		if (this == obj) {
-			return true;
-		}
-
-		if (obj == null || getClass() != obj.getClass()) {
-			return false;
-		}
-
-		ResourceManagerAddress that = (ResourceManagerAddress) obj;
-		return Objects.equals(address, that.address) &&
-			Objects.equals(resourceManagerId, that.resourceManagerId);
-	}
-
-	@Override
-	public int hashCode() {
-		return Objects.hash(address, resourceManagerId);
-	}
-
-	@Override
-	public String toString() {
-		return address + '(' + resourceManagerId + ')';
-	}
-}

