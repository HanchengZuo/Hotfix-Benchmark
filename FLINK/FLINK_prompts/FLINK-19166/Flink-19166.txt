You are an Automated Program Repair Tool for Hot Fix.

Please help me check and fix the bugs in the Java code file I uploaded. Maintain the original code structure and logic as much as possible, modifying only the problematic parts. Finally, provide the complete updated code files so that I can directly replace the old code for testing.

Main code file: StreamingFileWriter.java

Test Case for Verification:
```java
public class StreamingFileWriterTest {

	@ClassRule
	public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();

	private Path path;

	@Before
	public void before() throws IOException {
		File file = TEMPORARY_FOLDER.newFile();
		file.delete();
		path = new Path(file.toURI());
	}

	@Test
	public void testFailover() throws Exception {
		OperatorSubtaskState state;
		try (OneInputStreamOperatorTestHarness<RowData, CommitMessage> harness = create()) {
			harness.setup();
			harness.initializeEmptyState();
			harness.open();
			harness.processElement(row("1"), 0);
			harness.processElement(row("2"), 0);
			harness.processElement(row("2"), 0);
			state = harness.snapshot(1, 1);
			harness.processElement(row("3"), 0);
			harness.processElement(row("4"), 0);
			harness.notifyOfCompletedCheckpoint(1);
			List<String> partitions = collect(harness);
			Assert.assertEquals(Arrays.asList("1", "2"), partitions);
		}

		// first retry, no partition {1, 2} records
		try (OneInputStreamOperatorTestHarness<RowData, CommitMessage> harness = create()) {
			harness.setup();
			harness.initializeState(state);
			harness.open();
			harness.processElement(row("3"), 0);
			harness.processElement(row("4"), 0);
			state = harness.snapshot(2, 2);
			harness.notifyOfCompletedCheckpoint(2);
			List<String> partitions = collect(harness);
			Assert.assertEquals(Arrays.asList("1", "2", "3", "4"), partitions);
		}

		// second retry, partition {4} repeat
		try (OneInputStreamOperatorTestHarness<RowData, CommitMessage> harness = create()) {
			harness.setup();
			harness.initializeState(state);
			harness.open();
			harness.processElement(row("4"), 0);
			harness.processElement(row("5"), 0);
			state = harness.snapshot(3, 3);
			harness.notifyOfCompletedCheckpoint(3);
			List<String> partitions = collect(harness);
			Assert.assertEquals(Arrays.asList("3", "4", "5"), partitions);
		}

		// third retry, multiple snapshots
		try (OneInputStreamOperatorTestHarness<RowData, CommitMessage> harness = create()) {
			harness.setup();
			harness.initializeState(state);
			harness.open();
			harness.processElement(row("6"), 0);
			harness.processElement(row("7"), 0);
			harness.snapshot(4, 4);
			harness.processElement(row("8"), 0);
			harness.snapshot(5, 5);
			harness.processElement(row("9"), 0);
			harness.snapshot(6, 6);
			harness.notifyOfCompletedCheckpoint(5);
			List<String> partitions = collect(harness);
			// should not contains partition {9}
			Assert.assertEquals(Arrays.asList("4", "5", "6", "7", "8"), partitions);
		}
	}

	private static RowData row(String s) {
		return GenericRowData.of(StringData.fromString(s));
	}

	private static List<String> collect(
			OneInputStreamOperatorTestHarness<RowData, CommitMessage> harness) {
		List<String> parts = new ArrayList<>();
		harness.extractOutputValues().forEach(m -> parts.addAll(m.partitions));
		return parts;
	}

	private OneInputStreamOperatorTestHarness<RowData, CommitMessage> create() throws Exception {
		StreamingFileWriter writer = new StreamingFileWriter(1000, StreamingFileSink.forRowFormat(
				path, (Encoder<RowData>) (element, stream) ->
						stream.write((element.getString(0) + "\n").getBytes(StandardCharsets.UTF_8)))
				.withBucketAssigner(new BucketAssigner<RowData, String>() {
					@Override
					public String getBucketId(RowData element, Context context) {
						return element.getString(0).toString();
					}

					@Override
					public SimpleVersionedSerializer<String> getSerializer() {
						return SimpleVersionedStringSerializer.INSTANCE;
					}
				})
				.withRollingPolicy(OnCheckpointRollingPolicy.build()));
		OneInputStreamOperatorTestHarness<RowData, CommitMessage> harness = new OneInputStreamOperatorTestHarness<>(
				writer, 1, 1, 0);
		harness.getStreamConfig().setTimeCharacteristic(TimeCharacteristic.ProcessingTime);
		return harness;
	}
}
```

Error Stack Trace from the Failing Test Case:
```
[ERROR] testFailover(org.apache.flink.table.filesystem.stream.StreamingFileWriterTest)  Time elapsed: 0.484 s  <<< FAILURE!
java.lang.AssertionError: expected:<[1, 2, 3, 4]> but was:<[3, 4]>
        at org.junit.Assert.fail(Assert.java:88)
        at org.junit.Assert.failNotEquals(Assert.java:834)
        at org.junit.Assert.assertEquals(Assert.java:118)
        at org.junit.Assert.assertEquals(Assert.java:144)
        at org.apache.flink.table.filesystem.stream.StreamingFileWriterTest.testFailover(StreamingFileWriterTest.java:94)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
        at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)
        at org.junit.rules.RunRules.evaluate(RunRules.java:20)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
        at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
        at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
        at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
```

Localized Bug Locations (from fault localization):
- File: `StreamingFileWriter.java`
  - method: `public void initializeState(StateInitializationContext context) throws Exception`

Issue title for this bug:
```text
StreamingFileWriter should register Listener before the initialization of buckets
```
